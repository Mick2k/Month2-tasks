#!/bin/bash
##Excercise 1

##THIS IS NOW DONE USING AWK COMMANDS INSTEAD OF GREP AND XARGS

Opt1="1 - List all files in /var/log ending in '.log'"
Opt2="2 - List Directories in var/log"
Opt3="3 - List all files in var/log which don't end in '.log' "
Opt4="4 - Lines from /var/log/messages which mention 'syslog'"
Opt5="5 - List of usernames who tried to login"

clear
title="=== /var/log options ==="
echo "$title"
echo "Please make a choice (1-5) to continue..."
echo "$Opt1"
echo "$Opt2"
echo "$Opt3"
echo "$Opt4"
echo "$Opt5"

echo "Press Ctrl+C to quit"
read Choice
case $Choice in


## a. List all the files in /var/log which end in '.log'

#'ls -a' lists all the files and does not ignore entries starting with '.'
#'*.log' makes use of the wildcard feature '*' to list any file ending in '.log'
# | (piping) takes the input from the previous command and uses it as the input for the next
# awk is used to execute its commands from standard input from the piped in data, 'awk -F/' sets '/' as the devider between the data, followed by '{print $4}', so this is printing the 4th string seperated by '/' within the standered input or data

		1)
		echo "$Opt1:"
		
		ls -a /var/log/*.log | awk -F/ '{print $4}' 
		read -n 1 -s -r -p "Press any key to continue"
		exec bash /home/centos/bash/tasks-month2/Month2-tasks-git/AWK-exercise1.1bonus
		;;

## b. List just the directories in /var/log/

#'ls -d /var/log/*/ This command will list all the directories within the specifed directory along with their full path, again utilising the wildcard feature, it is the '*/' that dictates that it is a directory
# | (piping) takes the input from the previous command and uses it as the input for the next
# awk is used to execute its commands from standard input from the piped in data, 'awk -F/' sets '/' as the devider between the data, followed by '{print $4}', so this is printing the 4th string seperated by '/' within the standered input or data

		2)
		echo "$Opt2:"
		ls -d /var/log/*/ | awk -F/ '{print $4}'
		read -n 1 -s -r -p "Press any key to continue"
                exec bash /home/centos/bash/tasks-month2/Month2-tasks-git/AWK-exercise1.1bonus
		;;

## c. List all the files which don't end in '.log'

#'ls -p /var/log -I"*.log"' lists all the files in /var/log/ with the -p placing any directory to show a '/' at the end, then the -I is used to exclude andything ending with '.log' also using the wildcard feature. 
# This is then piped into the command 'awk '!/\//{print $1}'' It is the '!/\//' which exclude the data, in this case it is the / after the \ which is excluded, the reason for the \ is to remove the special function / normally has...another example of the would be '!/string to exclude/' which would exclude any line with 'string to exclude'. So in this case, where the output specifically with the directories highlighted by having a '/' at the end would be picked up using this command and excluded from the output. which removes anything with a '/' from the data/list and then sent to standard output. This no longer needs '{'print $x}' as it is just a list without columns.

		3)
		echo "$Opt3:"
		ls -p /var/log -I "*.log" | awk '!/\//' 
		read -n 1 -s -r -p "Press any key to continue"
                exec bash /home/centos/bash/tasks-month2/Month2-tasks-git/AWK-exercise1.1bonus
		;;

## d. List just the lines from the '/var/log/messages' mentioning 'syslog'
# As I am looking to print the full line of the lines mentioning 'syslog', again we can leave the '{print $x}' out
# 'awk '/syslog/' prints the lines in the given file (in this case /var/log/messages). It is the command '/(string to find)/' which filters the data.
# 'sort -u' sorts this data uniquely and in alphabetical order
# 'less' gives the full list which you can scroll down through, without this it would only show a certain amount of data as the standard output...less is more

		4)
		echo "$Opt4:"
		sudo awk '/syslog/' /var/log/messages
		read -n 1 -s -r -p "Press any key to continue"
		exec bash /home/centos/bash/tasks-month2/Month2-tasks-git/AWK-exercise1.1bonus
		;;

## e. From log files such as 'secure' or 'auth' extract a list of the usernames (just the usernames) which have attempted to authenticate, de-duplicate them (so the list should only of be unique names) and sort them into alphabetical order.
# 'awk '/input_userauth_request/' prints the lines in the given file (in this case /var/log/secure). It is the command '/(string to find)/' which filters the data.
#'{print $9}' only prints the 9th column as this is where the usernames are located which is all that we are looking for.
# 'sort -u' sorts this data uniquely and in alphabetical order
# 'less' gives the full list which you can scroll down through, without this it would only show a certain amount of data as the standard output...less is more

		5)
		echo "$Opt5:"
		sudo awk '/input_userauth_request/{print $9}' /var/log/secure | sort -u | less
		read -n 1 -s -r -p "Press any key to continue"
		exec bash /home/centos/bash/tasks-month2/Month2-tasks-git/AWK-exercise1.1bonus
		;;

		*)
		echo "%%%---+++xxx ERROR xxx+++---%%%"
		echo "Please enter only a value between 1 - 5:"
                read -n 1 -s -r -p "Press any key to continue"
                exec bash /home/centos/bash/tasks-month2/Month2-tasks-git/AWK-exercise1.1bonus

esac

